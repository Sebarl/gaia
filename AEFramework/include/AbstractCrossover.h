#ifndef ABSTRACTCROSSOVER_H
#define ABSTRACTCROSSOVER_H

#include <vector>
#include <Random.h>
#include "EvolutionUtils.h"
#include "EvolutionaryOperator.h"
#include "GenericException.h"

template <class T>
class AbstractCrossover : public EvolutionaryOperator<T>
{
    protected:
        unsigned int crossoverPoints;
        float probability;
    /**
     * Sets up a fixed-point cross-over implementation.  Cross-over is
     * applied to all pairs of parents.  To apply cross-over only to a
     * proportion of parent pairs, use the {@link #AbstractCrossover(int, Probability)}
     * constructor.
     * @param crossoverPoints The constant number of cross-over points
     * to use for all cross-over operations.
     */
        AbstractCrossover(unsigned int crossoverPoints){
            if (crossoverPoints == 0){
                throw GenericException("Number of crossover points must be positive.");
            }
            this->crossoverPoints = crossoverPoints;
            this->probability = 1.0;
        }

        AbstractCrossover(unsigned int crossoverPoints, float crossoverProbability){
             if (crossoverPoints == 0){
                throw GenericException("Number of crossover points must be positive.");
             }
             if (crossoverProbability >1 || crossoverProbability < 0){
                throw GenericException("Crossover probability must be between 0.0 and 1.0.");
             }
            this->crossoverPoints = crossoverPoints;
            this->probability = crossoverProbability;
        }


        AbstractCrossover(){}

        virtual ~AbstractCrossover(){}

        virtual void mate(T* parent1, T* parent2, Random* rng)=0;


    public:
         /**
         * Applies the cross-over operation to the selected candidates.  Pairs of
         * candidates are chosen randomly and subjected to cross-over to produce
         * a pair of offspring candidates.
         * @param selectedCandidates The evolved individuals that have survived to
         * be eligible to reproduce.
         * @param rng A source of randomness used to determine the location of
         * cross-over points.
         * @return The combined set of evolved offspring generated by applying
         * cross-over to the the selected candidates.
         */
        virtual std::vector<T*> apply(std::vector<T*> selectedCandidates, Random* rng){
            // Shuffle the collection before applying each operation so that the
            // evolution is not influenced by any ordering artifacts from previous
            // operations.

            shufflePopulation(selectedCandidates, rng);

            std::vector<T*> result;

            unsigned int i=0;

            while (i<selectedCandidates.size()){

                T* parent1 = selectedCandidates[i++];

                if (i<selectedCandidates.size()){
                    T* parent2 = selectedCandidates[i++];
                    // Randomly decide (according to the current cross-over probability)
                    // whether to perform cross-over for these 2 parents.

                    if (rng->nextFloat() < probability){
                        mate(parent1, parent2, rng);

                    }
                    // If there is no cross-over to perform, just add the parents to the
                    // results unaltered.
                    result.push_back(parent1);
                    result.push_back(parent2);

                }
                else
                {
                    // If we have an odd number of selected candidates, we can't pair up
                    // the last one so just leave it unmodified.
                    result.push_back(parent1);
                }
            }
            return result;
        }

};

#endif // ABSTRACTCROSSOVER_H
