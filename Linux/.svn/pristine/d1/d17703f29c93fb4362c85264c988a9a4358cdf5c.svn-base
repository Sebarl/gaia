#include "AI.h"
#include <cmath>
#include <iostream>
#include <fstream>

//variables declaration

bool exitEarly = false;

//definicion de teclas;
const uint8 right = 128;
const uint8 left = 64;
const uint8 down = 32;
const uint8 up = 16;
const uint8 start = 8;
const uint8 select = 4;
const uint8 keyB = 2;
const uint8 keyA = 1;

//parameters declaration

int keyStartDelay = 0;
int keyPressCoolValue = 5;
int tipTriggerDistance = 30;
int baseTriggerDistance = 10;
int coolOffTime = 50; //numero de frames para esperar si nos trancamos
int startTime = 100; //cantida de frames que mantenemos el piston abajo para tirar la pelota
int stuckTolerance = 180;//cantidad de frames que esperamos para decidir que nos trancamos

bool inCooloff = false;
int startCount = startTime;
int coolOff = 0;
uint8 keyPress = 0, oldKeyPress = 0;
int keyPressCoolOff = 0;
int repeatedFrames = 0;
uint8 oldX = 0;
uint8 oldY = 0;
uint8* RAM2;
//std::fstream file;

int f(uint8* RAM, double A, double B, double C, double D, double E, double F, double G, double H, double I, double J, double K, double L, double M, double N, double O, double P){
	return A*RAM[0x0151] //vidas pinball
		+ B*RAM[0x0015] //valor menos significativo del eje x de la bola
		+ C*RAM[0x0016] //valor mas significativo del eje x de la bola
		+ D*RAM[0x0017] //valor menos significativo del eje y de la bola
		+ E*RAM[0x0018] //valor mas significativo del eje y de la 
		+ F*RAM[0x0019] //velocidad en el eje x de la bola
		+ G*RAM[0x001A] //velocidad en el eje y de la bola
		+ H*RAM[0x0100] //digito mas significativo puntaje
		+ I*RAM[0x0101] //2do digito mas significativo puntaje
		+ J*RAM[0x0102] //3er digito mas significativo puntaje
		+ K*RAM[0x0103] //4to digito mas significativo puntaje
		+ L*RAM[0x0104] //5to digito mas significativo puntaje
		+ M*RAM[0x0105] //6to digito mas significativo puntaje
		+ N*RAM[0x00BF] //Pantalla actual: 0 - arriba, 1 - abajo, 2 - bonus
		+ O*RAM[0x0003] //Boolean menu: 1 - true, 0 - false
		+ P*RAM[0x02A3] //Mario's face in bonus stage
		+ 0 * RAM[0x02B3] //Princess x axis
		+ 0 * RAM[0x011C] //Princess y logical axis
		;
}

bool compareY(uint8 a, uint8 b, int tolerance){
	return -16 < b - a && b - a < tolerance;
}

uint8 runAI(uint8* RAM, bool& exitNow){
	RAM2=RAM;
	//stuck check
	oldKeyPress = keyPress;
	keyPress = 0;
	if (RAM[0x00BF] < 2){
		if (!(std::abs(RAM[0x0016] - 0xE1) < 10 && std::abs(RAM[0x0018] - 0x9A) < 10) && !inCooloff && std::abs(RAM[0x0016] - oldX) <5 && std::abs(RAM[0x0018] - oldY) <5){
			repeatedFrames++;
		}
		else{
			repeatedFrames = 0;
		}

		if (repeatedFrames >= stuckTolerance){
			repeatedFrames = 0;
			coolOff = coolOffTime;
			inCooloff = true;
		}
		else if (keyPressCoolOff > 0){
			keyPressCoolOff--;
			keyPress = oldKeyPress;
		}
		else if (inCooloff){
			coolOff--;
			if (coolOff <= 0){
				inCooloff = false;
			}
		}
		else{//izquierda
			if (std::abs(RAM[0x0016] - 0x6E) < baseTriggerDistance && compareY(RAM[0x0018], 0xBF, baseTriggerDistance)){
				keyPress = keyPress | left;
				keyPressCoolOff = keyPressCoolValue;
			}
			else if (std::abs(RAM[0x0016] - 0x90) < tipTriggerDistance && compareY(RAM[0x0018], 0xEC, tipTriggerDistance)){
				keyPress = keyPress | left;
				keyPressCoolOff = keyPressCoolValue;
			}
			else if (std::abs(RAM[0x0016] - 0x70) < baseTriggerDistance && compareY(RAM[0x0018], 0xBA, baseTriggerDistance)){
				keyPress = keyPress | left;
				keyPressCoolOff = keyPressCoolValue;
			}
			else if (std::abs(RAM[0x0016] - 0x8B) < tipTriggerDistance && compareY(RAM[0x0018], 0xCD, tipTriggerDistance)){
				keyPress = keyPress | left;
				keyPressCoolOff = keyPressCoolValue;
			}
			//derecha
			if (std::abs(RAM[0x0016] - 0xB0) < baseTriggerDistance &&compareY(RAM[0x0018], 0xBF, baseTriggerDistance)){
				keyPress = keyPress | keyB;
				keyPressCoolOff = keyPressCoolValue;
			}
			else if (std::abs(RAM[0x0016] - 0x95) < tipTriggerDistance && compareY(RAM[0x0018], 0xD4, tipTriggerDistance)){
				keyPress = keyPress | keyB;
				keyPressCoolOff = keyPressCoolValue;
			}
			else if (std::abs(RAM[0x0016] - 0xAF) < baseTriggerDistance && compareY(RAM[0x0018], 0xBA, baseTriggerDistance)){
				keyPress = keyPress | keyB;
				keyPressCoolOff = keyPressCoolValue;
			}
			else if (std::abs(RAM[0x0016] - 0x95) < tipTriggerDistance && compareY(RAM[0x0018], 0xCD, tipTriggerDistance)){
				keyPress = keyPress | keyB;
				keyPressCoolOff = keyPressCoolValue;
			}//inicio
			else if (std::abs(RAM[0x0016] - 0xE1) < 5 && std::abs(RAM[0x0018] - 0x9A) < 5 && startCount > 0){
				keyPress = keyPress | keyB;
				//keyPressCoolOff = keyPressCoolValue;
				startCount--;
			}
			else if (startCount == 0){
				startCount = startTime;
			}//si estamos en el menu
			else if (RAM[0x0003] == 1){
				if(!exitEarly){
					keyStartDelay--;
					if (keyStartDelay<1){
						keyPress = keyPress | start;
						exitEarly = true;	
					}		
				}
				else{
					exitNow = true;
				}	
			}
		}
	}
	else{
		if (RAM[0x011C] == 0 || (0x02B3<0x70 || 0xBF>0x02B3)){//princess is still up, follow ball
			if (RAM[0x02A3] < RAM[0x0016]){
				keyPress = keyPress | right;
			}
			else if (RAM[0x02A3] > RAM[0x0016]){
				keyPress = keyPress | left;
			}
		}
		else{ //princess falling, follow princess
			if (RAM[0x02A3] < RAM[0x02B3]){
				keyPress = keyPress | right;
			}
			else if (RAM[0x02A3] > RAM[0x02B3]){
				keyPress = keyPress | left;
			}
		}
	}
	oldX = RAM[0x0016];
	oldY = RAM[0x0018];
	return keyPress;
}

void printStatistics(){
	std::cout << (int)RAM2[0x010E] << (int)RAM2[0x010F] << (int)RAM2[0x0110] << (int)RAM2[0x0111] << (int)RAM2[0x0112] << (int)RAM2[0x0113] << " " << (int)RAM2[0x0151]<<"\n";
}

int initializeParams(std::string s){
FILE* file = fopen(s.c_str(), "r");
if(file != NULL){
	fscanf (file, "%d", &keyStartDelay);
	fscanf (file, "%d", &keyPressCoolValue);
	fscanf (file, "%d", &tipTriggerDistance);
	fscanf (file, "%d", &baseTriggerDistance);
	fscanf (file, "%d", &coolOffTime);
	fscanf (file, "%d", &startTime);
	fscanf (file, "%d", &stuckTolerance);
	fclose(file);
	return 1;
}
else{
	//error, cerrar fceux!
	return 0;
}
}

